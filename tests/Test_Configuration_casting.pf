! Node types

! Instrinsic scalars
! - logical
! - integer
! - real
! - character(:), allocatable
!
! Intrinsic arrays
! - ArrayWrap(logical(:))
! - ArrayWrap(integer(:))
! - ArrayWrap(real(:))
! - ArrayWrap(character(:))
!
! Generic gFTL containers
! - UnlimitedVector
! - OrderedStringUnlimitedMap
! - IntegerUnlimitedMap
!
! TBD? - Specific gFTL containers
! - Vectors
!   - LogicalVector
!   - IntegerVector
!   - RealVector
!   - StringVector
! - Maps
!   - StringLogicalMap
!   - StringIntegerMap
!   - StringRealMap
!   - StringStringMap
!   - IntegerLogicalMap
!   - IntegerIntegerMap
!   - IntegerRealMap
!   - IntegerStringMap




module Test_Configuration_casting
  use funit
  use yafyaml
  use fy_String
  use gFTL_UnlimitedVector
  use fy_OrderedStringUnlimitedMap
  use, intrinsic :: iso_fortran_env, only: INT32
  use, intrinsic :: iso_fortran_env, only: REAL32
  implicit none

contains

  @test
  subroutine test_assign_to_logical_scalar()
    logical :: found

    found = Configuration(scalar=.true.) ! needs overloaded assignment
    @assert_that(found, is(True()))
    
  end subroutine test_assign_to_logical_scalar

  @test
  subroutine test_assign_to_integer_scalar()
    integer :: found

    found = Configuration(scalar=1) ! needs overloaded assignment
    @assert_that(found,is(equal_to(1)))
    
    found = Configuration(scalar=2) ! needs overloaded assignment
    @assert_that(found,is(equal_to(2)))

  end subroutine test_assign_to_integer_scalar

  @test
  subroutine test_assign_to_real_scalar()
    real :: found
    real :: expected = 1.23

    found = Configuration(scalar=expected) ! needs overloaded assignment
    @assert_that(found,is(equal_to(expected)))
    
  end subroutine test_assign_to_real_scalar
  
  @test
  ! Type-mismatch
  subroutine test_assign_to_integer_fail_set_default()
    integer :: found
    real :: expected = 1.23

    found = Configuration(scalar=expected)
    @assert_that(found,is(equal_to(-huge(1_INT32))))

  end subroutine test_assign_to_integer_fail_set_default

  @test
  subroutine test_assign_to_string_scalar()
    type(Configuration) :: c
    character(:), allocatable :: found
    character(*), parameter :: expected = 'dog'

    c = Configuration(scalar=String(expected))
    found = c ! overloaded assignment
    @assert_that(found, is(equal_to(expected)))
  end subroutine test_assign_to_string_scalar


  @test
  subroutine test_assign_to_logical_array()
    logical, allocatable :: found(:)
    
    found = Configuration(array=[.true.,.false.]) ! needs overloaded assignment
    @assert_that(found,is(equal_to([.true.,.false.])))
    
  end subroutine test_assign_to_logical_array

  @test
  subroutine test_assign_to_logical_array_from_unlimited_vector()
    logical, allocatable :: found(:)
    type (UnlimitedVector) :: v

    class(*), pointer :: node
    type(Configuration) :: c

    ! GFortran 9.2  breaks with the following construction.
    ! Fortunately, this is not the way the construction is
    ! done within the parser, but it does limit the
    ! utility of Configuration objects for other purposes.
!!$    call v%push_back(.false.)
!!$    call v%push_back(.true.)
!!$    call v%push_back(.false.)
!!$    found = Configuration(scalar=v)
    

    ! This way does work
    c = Configuration(scalar=v)
    call c%get_node_at_selector(node)
    select type (node)
    type is (UnlimitedVector)
       call node%push_back(.false.)
       call node%push_back(.true.)
       call node%push_back(.false.)
    end select
    found = c
    
    @assert_that(found,is(equal_to([.false.,.true.,.false.])))
    
  end subroutine test_assign_to_logical_array_from_unlimited_vector

  @test
  subroutine test_assign_to_logical_array_fail()
    logical, allocatable :: found(:)
    type (UnlimitedVector) :: v

    ! type mismatch
    found = Configuration(array=[1.,3.])
    @assert_that(found, is(empty_array()))
    
    ! category mismatch
    deallocate(found)
    found = Configuration(scalar=1)
    @assert_that(found, is(empty_array()))

    ! mixed types in unlimited
    call v%push_back(3)
    call v%push_back(.true.)
    deallocate(found)
    found = Configuration(scalar=v)
    @assert_that(found, is(empty_array()))
    
  end subroutine test_assign_to_logical_array_fail
  
  
  @test
  subroutine test_assign_to_integer_array()
    integer, allocatable :: found(:)

    found = Configuration(array=[1,3]) ! needs overloaded assignment
    @assert_that(found,is(equal_to([1,3])))
    
  end subroutine test_assign_to_integer_array

  @test
  subroutine test_assign_to_integer_array_from_unlimited_vector()
    integer, allocatable :: found(:)
    type (UnlimitedVector) :: v

    class(*), pointer :: node
    type(Configuration) :: c

    c = Configuration(scalar=v)
    call c%get_node_at_selector(node)
    select type (node)
    type is (UnlimitedVector)
       call node%push_back(3)
       call node%push_back(2)
       call node%push_back(1)
    end select
    found = c
    
    @assert_that(found,is(equal_to([3,2,1])))
    
  end subroutine test_assign_to_integer_array_from_unlimited_vector

  @test
  subroutine test_assign_to_integer_array_fail()
    integer, allocatable :: found(:)
    type (UnlimitedVector) :: v

    class(*), pointer :: node
    type(Configuration) :: c


    ! type mismatch
    found = Configuration(array=[1.,3.])
    @assert_that(found, is(empty_array()))
    deallocate(found)
    
    ! category mismatch
    found = Configuration(scalar=1)
    @assert_that(found, is(empty_array()))
    deallocate(found)

    ! mixed types in unlimited
    c = Configuration(scalar=v)
    call c%get_node_at_selector(node)
    select type (node)
    type is (UnlimitedVector)
       call node%push_back(3)
       call node%push_back(2.)
    end select
    found = c
    @assert_that(found, is(empty_array()))
    
  end subroutine test_assign_to_integer_array_fail
  
  
  @test
  subroutine test_assign_to_real_array()
    real, allocatable :: found(:)

    found = Configuration(array=[1.,3.]) ! needs overloaded assignment
    @assert_that(found,is(equal_to([1.,3.])))
    
  end subroutine test_assign_to_real_array

  @test
  subroutine test_assign_to_real_array_from_unlimited_vector()
    real, allocatable :: found(:)
    type (UnlimitedVector) :: v

    class(*), pointer :: node
    type(Configuration) :: c

    c = Configuration(scalar=v)
    call c%get_node_at_selector(node)
    select type (node)
    type is (UnlimitedVector)
       call node%push_back(3.)
       call node%push_back(2.)
       call node%push_back(1.)
    end select
    found = c
    
    @assert_that(found,is(equal_to([3.,2.,1.])))
      
  end subroutine test_assign_to_real_array_from_unlimited_vector

  @test
  subroutine test_assign_to_real_array_fail()
    real, allocatable :: found(:)

    ! type mismatch
    found = Configuration(array=[1,3])
    @assert_that(found, is(empty_array()))
    
    ! category mismatch
    deallocate(found)
    found = Configuration(scalar=1)
    @assert_that(found, is(empty_array()))

  end subroutine test_assign_to_real_array_fail
  

  @test
  subroutine test_assign_to_string_array()
    character(:), allocatable :: found(:)

    found = Configuration(array=[character(4) :: 'cat', 'food'])
    @assert_that(found,is(equal_to(['cat ','food'])))
    
  end subroutine test_assign_to_string_array

  ! Support varying length strings with StringVector
  @test
  subroutine test_assign_to_string_vector()
    use gFTL_StringVector
    type (StringVector) :: found
    type (UnlimitedVector) :: expected
    integer :: n

 
    ! This way pads ...
    found = Configuration(array=[character(4) :: 'cat', 'food'])
    @assert_that(int(found%size()), is(equal_to(2)))
    @assert_that(found%at(1), is(equal_to('cat ')))
    @assert_that(found%at(2), is(equal_to('food')))

    ! This way does not ...
    call expected%push_back(String('cat'))
    call expected%push_back(String('food'))

    found = Configuration(scalar=expected)
    @assert_that(int(found%size()), is(equal_to(2)))
    @assert_that(found%at(1), is(equal_to('cat')))
    @assert_that(found%at(2), is(equal_to('food')))
    
  end subroutine test_assign_to_string_vector

  @test
  subroutine test_assign_to_string_array_from_unlimited_vector()
    character(:), allocatable :: found(:)
    type (UnlimitedVector) :: v

    class(*), pointer :: node
    type(Configuration) :: c

    c = Configuration(scalar=v)
    call c%get_node_at_selector(node)
    select type (node)
    type is (UnlimitedVector)
       call node%push_back(String('cat'))
       call node%push_back(String('food'))
       call node%push_back(String(''))
    end select
    found = c
    
    @assert_that(found,is(equal_to(['cat ','food','    '])))
    
  end subroutine test_assign_to_string_array_from_unlimited_vector

  @test
  subroutine test_assign_to_string_array_fail()
    character(:), allocatable :: found(:)
    type (UnlimitedVector) :: v
    class(*), pointer :: node
    type(Configuration) :: c


    ! type mismatch
    found = Configuration(array=[1,3])
    @assert_that(found, is(empty_array()))
    
    ! partial mismatch
    c = Configuration(scalar=v)
    call c%get_node_at_selector(node)
    select type (node)
    type is (UnlimitedVector)
       call node%push_back('a')
       call node%push_back(1)
    end select
    found = c

    @assert_that(found, is(empty_array()))
    
    ! category mismatch
    deallocate(found)
    found = Configuration(scalar=1)
    @assert_that(found, is(empty_array()))

  end subroutine test_assign_to_string_array_fail

  @test
  subroutine test_at_key_not_a_map()
    type(Configuration) :: c
    type(Configuration) :: sub

    c = Configuration(scalar=1)
    sub = c%at('non-existent-key') ! should "fail"
    @assert_that(sub%is_none(), is(true()))
    
  end subroutine test_at_key_not_a_map

  @test
  subroutine test_at_key_not_a_key()
    type(Configuration) :: c
    type(Configuration) :: sub

    class(*), pointer :: node

    c = Configuration(OrderedStringUnlimitedMap())
    call c%get_node_at_selector(node)
    select type (node)
    type is (OrderedStringUnlimitedMap)
       call node%insert('a',1)
       call node%insert('b',.true.)
    end select

    sub = c%at('non-existent-key') ! should "fail"
    @assert_that(sub%is_none(), is(true()))
    
  end subroutine test_at_key_not_a_key

  !@test
  subroutine test_at_key_integer()
    type(Configuration) :: c
    integer :: found
    
    class(*), pointer :: node

    c = Configuration(OrderedStringUnlimitedMap())
    call c%get_node_at_selector(node)
    select type (node)
    type is (OrderedStringUnlimitedMap)
       call node%insert('a',1)
       call node%insert('b',2)
    end select

    found = c%at('b')
    @assert_that(found,is(equal_to(2)))
  end subroutine test_at_key_integer

  !@test
  subroutine test_at_key_logical()
    type(Configuration) :: c
    logical :: found
    
    class(*), pointer :: node

    c = Configuration(OrderedStringUnlimitedMap())
    call c%get_node_at_selector(node)
    select type (node)
    type is (OrderedStringUnlimitedMap)
       call node%insert('a',1)
       call node%insert('b',.false.)
    end select

    found = c%at('b')
    @assert_that(found,is(false()))
  end subroutine test_at_key_logical

  @test
  subroutine test_at_key_map()
    type(Configuration), target :: c
    type(Configuration) :: sub
    type(OrderedStringUnlimitedMap) :: found_map

    class(*), pointer :: node
    class(*), pointer :: node2
    integer :: n

    c = Configuration(OrderedStringUnlimitedMap())
    call c%get_node_at_selector(node)
    select type (node)
    type is (OrderedStringUnlimitedMap)
       call node%insert('a',1)
       call node%insert('b',OrderedStringUnlimitedMap())
       node2 => node%at('b')
       select type (node2)
       type is (OrderedStringUnlimitedMap)
          call node2%insert('triangle',3)
          call node2%insert('quadrilateral',4)
       end select
    end select
    call c%get(sub,'b')
    n = sub%at('triangle')
    @assert_that(n,is(equal_to(3)))

  end subroutine test_at_key_map

  @test
  subroutine test_at_index_not_a_vector()
    type(Configuration) :: c
    type(Configuration) :: sub

    c = Configuration(scalar=1)
    sub = c%at(5) ! should "fail"
    @assert_that(sub%is_none(), is(true()))
    
  end subroutine test_at_index_not_a_vector
  
  @test
  subroutine test_at_index_out_of_range()
    type(Configuration) :: c
    type(Configuration) :: sub
    type(UnlimitedVector) :: v

    class(*), pointer :: node
    
    ! This way does work
    c = Configuration(scalar=v)
    call c%get_node_at_selector(node)
    select type (node)
    type is (UnlimitedVector)
       call node%push_back(1)
       call node%push_back(7.)
    end select

    sub = c%at(5) ! should "fail"
    @assert_that(sub%is_none(), is(true()))
    
  end subroutine test_at_index_out_of_range
  
  @test
  subroutine test_at_index()
    type(Configuration), target :: c
    type(UnlimitedVector) :: vector
    logical :: found_logical
    integer :: found_integer
    real :: found_real
    character(:), allocatable :: found_string

    class(*), pointer :: node

    c = Configuration(UnlimitedVector())
    call c%get_node_at_selector(node)
    select type (node)
    type is (UnlimitedVector)
       call node%push_back(.true.)
       call node%push_back(1)
       call node%push_back(1.234)
       call node%push_back(String('foo'))
    end select

    found_logical = c%at(1)
    @assert_that(found_logical,is(true()))

    found_integer = c%at(2)
    @assert_that(found_integer,is(equal_to(1)))

    found_real = c%at(3)
    @assert_that(found_real,is(equal_to(1.234)))

    found_string = c%at(4)
    @assert_that(found_string,is(equal_to('foo')))

  end subroutine test_at_index

  @test
  subroutine test_at_index_map()
    type(Configuration), target :: c
    type(OrderedStringUnlimitedMap) :: found_map

    class(*), pointer :: node, node2
    integer :: n

    c = Configuration(UnlimitedVector())
    call c%get_node_at_selector(node)

    select type (node)
    type is (UnlimitedVector)
       call node%push_back(1)
       call node%push_back(OrderedStringUnlimitedMap())
       node2 => node%back()
       select type (node2)
       type is (OrderedStringUnlimitedMap)
          call node2%insert('triangle',3)
          call node2%insert('quadrilateral',4)
       end select
       call node%push_back(2.)
    end select

    n = c .at. 2 .at. 'triangle'
    @assert_that(n,is(equal_to(3)))
    n = c .at. 2 .at. 'quadrilateral'
    @assert_that(n,is(equal_to(4)))

  end subroutine test_at_index_map

end module Test_Configuration_casting
