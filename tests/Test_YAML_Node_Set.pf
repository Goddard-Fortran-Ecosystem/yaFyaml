module Test_YAML_Node_Set
   use funit
   use yafyaml
   implicit none

contains

   @test
   subroutine test_set_in_sequence()
      type(YAML_Node) :: node

      integer :: status
      logical :: flag
      type(sequence) :: s

      call s%push_back(IntNode(1))
      node = YAML_Node(SequenceNode(s))

      call node%set(.true., 1, rc=status)
      @assert_that(status, is(YAFYAML_SUCCESS))

      call node%get(flag, 1, rc=status)
      @assert_that(status, is(YAFYAML_SUCCESS))

      @assert_that(flag, is(true()))
      
   end subroutine test_set_in_sequence

   @test
   subroutine test_set_in_mapping()
      type(YAML_Node) :: node

      integer :: status
      logical :: flag
      type(mapping) :: m

      call m%insert(StringNode('a'), IntNode(1))
      node = YAML_Node(MappingNode(m))

      call node%set(.true., 'a', rc=status)
      @assert_that(status, is(YAFYAML_SUCCESS))

      call node%get(flag, 'a', rc=status)
      @assert_that(status, is(YAFYAML_SUCCESS))

      @assert_that(flag, is(true()))
      
   end subroutine test_set_in_mapping


   @test
   subroutine test_set_deep_int()
      type(YAML_Node) :: node

      integer :: status
      type(mapping) :: m
      type(sequence) :: s
      integer :: i

      call m%insert(StringNode('a'), IntNode(1))
      call s%push_back(IntNode(1))
      call s%push_back(StringNode('null'))
      call s%push_back(FloatNode(3.14159))
      call m%insert(StringNode('b'), SequenceNode(s))

      node = YAML_Node(MappingNode(m))

      call node%set(3, 'b', 2, rc=status)
      @assert_that(status, is(YAFYAML_SUCCESS))

      call node%get(i, 'b', 2, rc=status)
      @assert_that(status, is(YAFYAML_SUCCESS))

      @assert_that(i, is(3))
      
   end subroutine test_set_deep_int


   @test
   subroutine test_set_overload()
      use, intrinsic :: iso_fortran_env
      type(YAML_Node) :: node

      integer :: status
      logical :: flag
      integer(kind=INT32) :: i32
      integer(kind=INT64) :: i64
      real(kind=REAL32) :: r32
      real(kind=REAL64) :: r64
      character(len=:), allocatable :: str
      type(sequence) :: s
      
      call s%push_back(IntNode(1_INT32))
      node = YAML_Node(SequenceNode(s))

      call node%set(.true., 1, rc=status)
      call node%get(flag, 1, rc=status)
      @assert_that(flag, is(true()))

      call node%set(2_INT32, 1, rc=status)
      call node%get(i32, 1, rc=status)
      @assert_that(i32, is(2_INT32))
      
      call node%set(3_INT64, 1, rc=status)
      call node%get(i64, 1, rc=status)
      @assert_that(i64, is(3_INT64))

      call node%set(4._REAL32, 1, rc=status)
      call node%get(r32, 1, rc=status)
      @assert_that(r32, is(4._REAL32))

      call node%set(5._REAL64, 1, rc=status)
      call node%get(r64, 1, rc=status)
      @assert_that(r64, is(5._REAL64))

      call node%set('abcd', 1, rc=status)
      call node%get(str, 1, rc=status)
      @assertEqual('abcd', str)

   end subroutine test_set_overload

   @test
   ! Verify that set() with a new key acts as insert() for the
   ! relevant mapping.  This is probably the most important/common use
   ! case.
   subroutine test_set_as_insert()
      use, intrinsic :: iso_fortran_env
      type(YAML_Node) :: node
      integer :: status
      integer :: i
      real :: x
      type(mapping) :: m

      ! Clumsy steps to avoid deep copies that break compilers.
      call m%insert(StringNode('a'), IntNode(1))
      call m%insert(StringNode('b'), MappingNode())
      node = YAML_Node(MappingNode(m))
      call node%set(3, 'b', String('newkey'), rc=status)
!!$      call node%set(3, 'b',  5, rc=status)
      @assert_that(status, is(YAFYAML_SUCCESS))

      call node%get(i, 'b', 'newkey', rc=status)
!!$      call node%get(i, 'b', 5, rc=status)
      @assert_that(status, is(YAFYAML_SUCCESS))
      @assert_that(i, is(3))

      call node%set(5., 'b', String('anothernewkey'), rc=status)
      @assert_that(status, is(YAFYAML_SUCCESS))

     call node%get(x, 'b', String('anothernewkey'), rc=status)
     @assert_that(status, is(YAFYAML_SUCCESS))
     @assert_that(x, is(5.))


   end subroutine test_set_as_insert
end module Test_YAML_Node_Set
