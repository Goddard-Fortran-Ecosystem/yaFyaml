module Test_IntNode
   use funit
   use fy_Nodes
   use fy_ErrorCodes
   use, intrinsic :: iso_fortran_env, only: INT32, INT64
   use, intrinsic :: iso_fortran_env, only: REAL32, REAL64
   implicit none

contains

   @test
   subroutine test_is_int()
      class(AbstractNode), allocatable :: node
      class(AbstractNode), pointer :: pNode
      type(IntNode), target :: iNode
      logical :: flag

      allocate(node,source=IntNode(1_INT32))
      iNode = IntNode(1_INT32)
      pNode => iNode
      @assertTrue(pNode%is_int())
      flag = node%is_int()
      @assertTrue(flag)

      node = FloatNode(1._REAL32)
      @assertFalse(node%is_int())

   end subroutine test_is_int

   @test
   subroutine test_assignment()
      type(IntNode) :: i_node
      integer(kind=INT32) :: i32
      integer(kind=INT64) :: i64
      
      i_node = IntNode(1_INT32)

      i32 = i_node
      @assert_that(i32, is(1_INT32))

      i64 = i_node
      @assert_that(i64, is(1_INT64))

      i_node = IntNode(2_INT64)

      i32 = i_node
      @assert_that(i32, is(2_INT32))

      i64 = i_node
      @assert_that(i64, is(2_INT64))

   end subroutine test_assignment

   ! If internally stored integer is too large
   ! for requested precision, the access fails and
   ! -HUGE(1_INT32) is returned as an indicator.
   @test
   subroutine test_overflow()
      type(IntNode) :: i_node
      integer(kind=INT32) :: i32
      
      i_node = IntNode(int(huge(1_INT32),INT64) + 1)
      i32 = i_node
      @assert_that(i32, is(-huge(1_INT32)))

   end subroutine test_overflow

   @test
   subroutine test_casting_succeed()
      class(AbstractNode), allocatable :: node
      integer(kind=INT64), pointer :: i_ptr

      character(:), allocatable :: err_msg
      integer :: rc

      node = IntNode(7_INT32)
      err_msg = 'foo'
      i_ptr => to_int(node, err_msg=err_msg, rc=rc)

      @assert_that(i_ptr, is(7_INT64))
      @assert_that(rc, is(YAFYAML_SUCCESS))
      ! err_msg not changed if no error
      @assert_that(err_msg, is('foo'))
   end subroutine test_casting_succeed

   @test
   subroutine test_casting_fail()
      type(FloatNode) :: x_node
      integer(kind=INT64), pointer :: i_ptr
      integer, parameter :: MAXLEN=128

      character(MAXLEN) :: err_msg
      character(:), allocatable :: expected
      integer :: rc

      x_node = FloatNode(1._REAL32)
      i_ptr => to_int(x_node, err_msg=err_msg, rc=rc)
      @assertExceptionRaised('Type of request does not match type in config.')
      @assert_that(rc, is(YAFYAML_TYPE_MISMATCH))
      expected = error_message(YAFYAML_TYPE_MISMATCH)
      @assertEqual(expected, err_msg)

   end subroutine test_casting_fail


   ! This really tests functionality of Base Node, but we need
   ! a concrete class ...
   @test
   subroutine test_at_simple_mapping()
      class(AbstractNode), pointer :: top
      class(AbstractNode), pointer :: sub_node
      type(MappingNode), target :: mapping_node
      type(Mapping), pointer :: m
      integer(kind=INT32) :: i32
      character(100) :: err_msg
      integer :: status
      logical :: was_found
      logical :: is_int
      
      m => to_mapping(mapping_node)
      call m%insert(StringNode('A'),IntNode(1_INT32))
      call m%insert(StringNode('B'),FloatNode(2._REAL32))
      top => mapping_node

      err_msg = 'empty'
      sub_node => top%at('A', found=was_found, err_msg=err_msg, rc=status)
      @assertEqual('empty', err_msg)
      @assert_that(status, is(YAFYAML_SUCCESS))
      @assert_that(was_found, is(true()))

      ! Workaround for gfortran-11: needs temp variable
      ! computed outside assertion.
      is_int = sub_node%is_int()
      @assert_that(is_int, is (true()))
      i32 = sub_node
      @assert_that(i32, is(1))
   end subroutine test_at_simple_mapping
      
   @test
   subroutine test_at_simple_mapping_B()
      class(AbstractNode), pointer :: top
      class(AbstractNode), pointer :: sub_node
      type(MappingNode), target :: mapping_node
      type(Mapping), pointer :: m
      real(kind=REAL32) :: x32
      character(100) :: err_msg
      integer :: status
      logical :: was_found
      logical :: is_float

      m => to_mapping(mapping_node)
      call m%insert(StringNode('A'),IntNode(1_INT32))
      call m%insert(StringNode('B'),FloatNode(2._REAL32))
      top => mapping_node

      err_msg = 'empty'
      sub_node => top%at('B', found=was_found, err_msg=err_msg, rc=status)
      @assertEqual('empty', err_msg)
      @assert_that(status, is(YAFYAML_SUCCESS))
      @assert_that(was_found, is(true()))

      is_float = sub_node%is_float()
      @assert_that(is_float, is(true()))
      x32 = sub_node
      @assert_that(x32, is(2.))
   end subroutine test_at_simple_mapping_B
      
   @test
   subroutine test_at_simple_mapping_not_was_found()
      class(AbstractNode), pointer :: top
      class(AbstractNode), pointer :: sub_node
      type(MappingNode), target :: mapping_node
      type(Mapping), pointer :: m
      character(100) :: err_msg
      integer :: status
      logical :: was_found

      m => to_mapping(mapping_node)
      call m%insert(StringNode('A'),IntNode(1_INT32))
      call m%insert(StringNode('B'),FloatNode(2._REAL32))
      top => mapping_node

      err_msg = 'empty'
      ! Once with found arg
      sub_node => top%at('C', found=was_found, err_msg=err_msg, rc=status)
      @assert_that(status, is(YAFYAML_SUCCESS))
      @assertEqual('empty', err_msg)
      @assert_that(was_found, is(false()))

      ! and now without found arg
      sub_node => top%at('C', err_msg=err_msg, rc=status)
      @assertExceptionRaised('Selected item does not exist and no default value is provided.')
      @assert_that(status, is(YAFYAML_SELECTOR_NOT_FOUND))
      @assertEqual('Selected item does not exist and no default value is provided.', err_msg)
      @assert_that(was_found, is(false()))
      
   end subroutine test_at_simple_mapping_not_was_found
      
   @test
   subroutine test_at_simple_sequence()
      class(AbstractNode), pointer :: top
      class(AbstractNode), pointer :: sub_node
      type(SequenceNode), target :: sequence_node
      type(Sequence), pointer :: s
      integer(kind=INT32) :: i32
      character(100) :: err_msg
      integer :: status
      logical :: was_found
      logical :: is_int
      
      s => to_sequence(sequence_node)
      call s%push_back(IntNode(1_INT32))
      call s%push_back(FloatNode(2._REAL32))
      call s%push_back(StringNode('cat'))
      top => sequence_node

      err_msg = 'empty'
      sub_node => top%at(1, found=was_found, err_msg=err_msg, rc=status)
      @assertEqual('empty', err_msg)
      @assert_that(status, is(YAFYAML_SUCCESS))
      @assert_that(was_found, is(true()))

      is_int = sub_node%is_int()
      @assert_that(is_int, is (true()))
      i32 = sub_node
      @assert_that(i32, is(1))
   end subroutine test_at_simple_sequence
      
   
   @test
   subroutine test_at_sequence_fail_out_of_bounds()
      class(AbstractNode), pointer :: top
      class(AbstractNode), pointer :: sub_node
      type(SequenceNode), target :: sequence_node
      type(Sequence), pointer :: s
      integer(kind=INT32) :: i32
      character(100) :: err_msg
      integer :: status
      logical :: was_found
      
      s => to_sequence(sequence_node)
      call s%push_back(IntNode(1_INT32))
      call s%push_back(FloatNode(2._REAL32))
      call s%push_back(StringNode('cat'))
      top => sequence_node

      err_msg = 'empty'
      ! with found
      sub_node => top%at(0, found=was_found, err_msg=err_msg, rc=status)
      @assertEqual('empty', err_msg)
      @assert_that(status, is(YAFYAML_SUCCESS))
      @assert_that(was_found, is(false()))

      ! Index too large
      sub_node => top%at(5, found=was_found, err_msg=err_msg, rc=status)
      @assert_that(status, is(YAFYAML_SUCCESS))
      @assert_that(was_found, is(false()))

      ! without found
      sub_node => top%at(0, err_msg=err_msg, rc=status)
      @assertExceptionRaised('Sequence index is out of bounds.')
      @assertEqual('Sequence index is out of bounds.', err_msg)
      @assert_that(status, is(YAFYAML_SEQUENCE_INDEX_OUT_OF_BOUNDS))

   end subroutine test_at_sequence_fail_out_of_bounds
      
   
   @test
   ! Empty sequences are ==, so not <
   subroutine test_less_than_trivial()
      type(IntNode) :: a, b 

      @assertFalse(a < b)

   end subroutine test_less_than_trivial
   
   @test
   subroutine test_less_than_same_type
      type(IntNode) :: a, b 

      a = IntNode(1)
      b = IntNode(2)
      
      @assertTrue(a < b)
      @assertFalse(b < a)

   end subroutine test_less_than_same_type
   

   @test
   subroutine test_less_than_diff_type
      type(BoolNode) :: flag
      type(IntNode) :: i
      type(StringNode) :: str
      type(FloatNode) :: x
      type(SequenceNode) :: seq
      type(MappingNode) :: m

      flag = BoolNode(.false.)
      i = IntNode(1)
      x = FloatNode(1.)
      str = StringNode('cat')

      @assertFalse(i < flag)
      @assertTrue(i < str)
      @assertTrue(i < x)
      @assertTrue(i < seq)
      @assertTrue(i < m)

   end subroutine test_less_than_diff_type
   
end module Test_IntNode
