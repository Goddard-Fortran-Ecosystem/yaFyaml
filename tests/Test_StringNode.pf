module Test_StringNode
   use funit
   use fy_Nodes
   use fy_ErrorCodes
   use, intrinsic :: iso_fortran_env, only: INT32, INT64
   use, intrinsic :: iso_fortran_env, only: REAL32, REAL64
   implicit none

contains

   @test
   subroutine test_is_string()
      class(AbstractNode), allocatable :: node
      type(StringNode), target :: b_node
      logical :: flag

      b_node = StringNode('cat')
      @assertTrue(b_node%is_string())

      allocate(node,source=StringNode('dog'))
      flag = node%is_string()
      @assertTrue(flag)

      node = IntNode(1_INT32)
      @assertFalse(node%is_string())

   end subroutine test_is_string

   @test
   subroutine test_assignment()
      type(StringNode) :: s_node
      character(:), allocatable :: str
      
      s_node = StringNode('cat')
      str = s_node
      @assert_that(str, is('cat'))

      s_node = StringNode('dog')
      str = s_node
      @assert_that(str, is('dog'))


   end subroutine test_assignment

   @test
   subroutine test_casting_succeed()
      class(AbstractNode), allocatable :: node
      character(:), pointer :: s_ptr

      character(:), allocatable :: err_msg
      integer :: rc

      node = StringNode('cat')
      err_msg = 'foo'
      s_ptr => to_string(node, err_msg=err_msg, rc=rc)

      @assert_that(s_ptr, is('cat'))
      @assert_that(rc, is(YAFYAML_SUCCESS))
      ! err_msg not changed if no error
      @assert_that(err_msg, is('foo'))
   end subroutine test_casting_succeed

   @test
   subroutine test_casting_fail()
      type(IntNode) :: i_node
      character(:), pointer :: s_ptr
      integer, parameter :: MAXLEN=128

      character(MAXLEN) :: err_msg
      character(:), allocatable :: expected
      integer :: rc

      i_node = IntNode(1_INT32)
      s_ptr => to_string(i_node, err_msg=err_msg, rc=rc)
      @assertExceptionRaised('Type of request does not match type in config.')
      @assert_that(associated(s_ptr), is(false()))
      @assert_that(rc, is(YAFYAML_TYPE_MISMATCH))
      expected = error_message(YAFYAML_TYPE_MISMATCH)
      @assertEqual(expected, err_msg)

   end subroutine test_casting_fail


   @test
   ! Empty sequences are ==, so not <
   subroutine test_less_than_trivial()
      type(StringNode) :: s

      s = StringNode('cat')

      @assertFalse(s < s)

   end subroutine test_less_than_trivial
   
   @test
   subroutine test_less_than_same_type
      type(StringNode) :: a, b 

      a = StringNode('cat')
      b = StringNode('dog')

      @assertTrue(a < b)
      @assertFalse(b < a)

   end subroutine test_less_than_same_type
   

   @test
   subroutine test_less_than_diff_type
      type(BoolNode) :: flag
      type(IntNode) :: i
      type(StringNode) :: str
      type(FloatNode) :: x
      type(SequenceNode) :: seq
      type(MappingNode) :: m

      flag = BoolNode(.false.)
      i = IntNode(1)
      x = FloatNode(1.)
      str = StringNode('cat')

      @assertFalse(str < flag)
      @assertFalse(str < i)
      @assertTrue(str < x)
      @assertTrue(str < seq)
      @assertTrue(str < m)

   end subroutine test_less_than_diff_type
   
end module Test_StringNode
