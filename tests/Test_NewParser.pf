module Test_NewParser
   use funit
   use fy_NewConfiguration
   use fy_EscapedTextStream
   use fy_NewParser
   implicit none

contains

   @test
   subroutine test_single_scalar()
      type(Parser) :: p
      type(Configuration) :: cfg
      character(:), allocatable :: scalar

      p = Parser()
      cfg = p%load(EscapedTextStream("--- a\n..."))

      scalar = cfg

#ifdef __GFORTRAN__
      @assertEqual("a", scalar)
#else
      @assert_that(scalar, is("a"))
#endif

      call cfg%clear()
   end subroutine test_single_scalar

   @test
   subroutine test_single_flow_sequence()
      type(Parser) :: p
      type(Configuration) :: cfg
      logical :: flag

      p = Parser()
      cfg = p%load(EscapedTextStream("---\n [true, false, true]\n..."))

      flag = cfg%of(1)
      @assert_that(flag, is(true()))
      flag = cfg%of(2)
      @assert_that(flag, is(false()))
      flag = cfg%of(3)
      @assert_that(flag, is(true()))

   end subroutine test_single_flow_sequence

   @test
   subroutine test_single_flow_mapping()
      type(Parser) :: p
      type(Configuration) :: cfg
      logical :: flag

      p = Parser()
      cfg = p%load(EscapedTextStream("---\n {a: true, b: false}\n..."))

      flag = cfg%at("a")
      @assert_that(flag, is(equal_to(.true.)))

      flag = cfg%at("b")
      @assert_that(flag, is(equal_to(.false.)))


   end subroutine test_single_flow_mapping


   @test
   subroutine test_single_block_sequence()
      type(Parser) :: p
      type(Configuration) :: cfg
      logical :: flag

      p = Parser()
      cfg = p%load(EscapedTextStream("---\n - true \n - false \n - true \n..."))

      @assert_that(int(cfg%size()), is(3))
      
      flag = cfg%of(1)
      @assert_that(flag, is(.true.))
      flag = cfg%of(2)
      @assert_that(flag, is(.false.))
      flag = cfg%of(3)
      @assert_that(flag, is(.true.))

   end subroutine test_single_block_sequence

   @test
   subroutine test_nested_block_sequence()
      type(Parser) :: p
      type(Configuration) :: cfg
      type(Configuration) :: sub

      integer :: i, n

      p = Parser()
      cfg = p%load(EscapedTextStream("---\n - \n    - 1 \n    - 2 \n - \n    - 3 \n    - 4 \n..."))
      !                               0123 0123 012345678 012345678 0123 012345678 012345678 012

      sub = cfg%at(1)

      n = sub%at(1)
      @assert_that(n, is(1))
      n = sub%at(2)
      @assert_that(n, is(2))

      sub = cfg%at(2)
      n = sub%at(1)
      @assert_that(n, is(3))
      n = sub%at(2)
      @assert_that(n, is(4))

      ! check diving all at once

      n = cfg%at(2,1)
      @assert_that(n, is(3))
      n = cfg%at(1,2)
      @assert_that(n, is(2))
      

   end subroutine test_nested_block_sequence

   @test
   subroutine test_nested_block_mapping_sequence()
      type(Parser) :: p
      type(Configuration) :: cfg
      type(Configuration) :: sub
      integer :: n

      p = Parser()
      cfg = p%load(EscapedTextStream("---\n cat: \n    - 1 \n    - 2 \n dog: \n    - 3 \n    - 4 \n..."))
      !                               0123 0123456 012345678 012345678 0123567 012345678 012345678 012

      sub = cfg%of('cat')
      n = sub%of(1)
      @assert_that(n, is(1))
      n = sub%of(2)
      @assert_that(n, is(2))


      sub = cfg%of('dog')
      n = sub%of(1)
      @assert_that(n, is(3))
      n = sub%of(2)
      @assert_that(n, is(4))

   end subroutine test_nested_block_mapping_sequence

   @test
   subroutine test_nested_mapping_block_flow()
      type(Parser) :: p
      type(Configuration) :: cfg
      type(Configuration) :: sub

      integer :: v1, v2

      p = Parser()
      cfg = p%load(EscapedTextStream("---\n mapping: { v1: 7, v2: 8 } \n..."))
      sub = cfg%at('mapping')

      v1 = sub%at('v1')
      @assert_that(v1, is(equal_to(7)))

      v2 = sub%at('v2')
      @assert_that(v2, is(equal_to(8)))

   end subroutine test_nested_mapping_block_flow

   @test
   subroutine test_pflogger_reproducer()
      type(Parser) :: p
      type(Configuration) :: cfg

      p = Parser()
      cfg = p%load(EscapedTextStream("format: --- \n"))

   end subroutine test_pflogger_reproducer


   @test
   subroutine test_pflogger_reproducer2()
      type(Parser) :: p
      type(Configuration) :: cfg

      p = Parser()
      cfg = p%load(EscapedTextStream( &
           & " B: {a: '---' , b: hello}\n"))

   end subroutine test_pflogger_reproducer2



!   @test
   subroutine test_simple_anchor()
      type(Parser) :: p
      type(Configuration) :: cfg
      type(Configuration) :: sub

      integer :: i_a, i_b

      p = Parser()
      cfg = p%load(EscapedTextStream( &
           & "---\n" // &
           & " A: &anchor \n" // &
           & "    i: 1 \n" // &
           & " B: *anchor \n" // &
           & "..."))

      i_a = cfg%at('A', 'i')
      @assert_that(i_a, is(equal_to(1)))
      
      i_b = cfg%at('B', 'i')
      @assert_that(i_b, is(equal_to(1)))

   end subroutine test_simple_anchor

   ! Reproducer for issue #13
   @test
   subroutine test_quoted_integer()
      type(Parser) :: p
      type(Configuration) :: cfg

      character(:), allocatable :: s

      p = Parser()
      cfg = p%load(EscapedTextStream(' key1: "2004" \n'))

      call cfg%get(s,"key1", default="ABCDEFG")

#ifdef __GFORTRAN__
      @assertEqual("2004", s)
#else
      @assert_that(s, is(equal_to("2004")))
#endif

   end subroutine test_quoted_integer



   @test
   subroutine test_pflogger_reproducer3
      type(Parser) :: p
      type(Configuration) :: cfg
      integer :: unit

      p = Parser()

      cfg = p%load(EscapedTextStream( &
           & "A: \n" // &
           & "  class: StreamHandler \n" // &
           & "  unit: -129\n" // &
           & "  level: INFO"))

      unit = cfg%at("A", "unit")
      @assert_that(unit, is(-129))

   end subroutine test_pflogger_reproducer3

end module Test_NewParser

