module Test_Configuration_dump
  use funit
  use fy_Configuration
  use gFTL_UnlimitedVector
  use fy_OrderedStringUnlimitedMap
  use fy_String
  implicit none


contains

  @test
  subroutine test_dump_scalar_logical()
    type(Configuration) :: cfg
    character(100) :: buffer

    cfg = Configuration(.true.)
    write(buffer,"(DT)") cfg
#ifdef __GFORTRAN__
#else
    @assert_that(trim(buffer),is(equal_to('true')))
#endif

    cfg = Configuration(.false.)
    write(buffer,'(DT)') cfg
    @assert_that(trim(buffer),is(equal_to('false')))
    
  end subroutine test_dump_scalar_logical

  @test
  subroutine test_dump_scalar_integer()
    type(Configuration) :: cfg
    character(100) :: buffer

    cfg = Configuration(1)
    write(buffer,'(DT)') cfg

#ifdef __GFORTRAN__
#else
    @assert_that(trim(buffer),is(equal_to('1')))
#endif
  end subroutine test_dump_scalar_integer

  @test
  subroutine test_dump_scalar_real()
    type(Configuration) :: cfg
    character(100) :: buffer
    character(:), allocatable :: expected
    real :: x

    x = 1.234

    cfg = Configuration(x)
    write(buffer,'(g0)') x
    expected = trim(adjustl(buffer))
    write(buffer,'(DT)') cfg

#ifdef __GFORTRAN__
#else
    @assert_that(trim(adjustl(buffer)),is(equal_to(expected)))
#endif
    
  end subroutine test_dump_scalar_real

  @test
  subroutine test_dump_scalar_string()
    type(Configuration) :: cfg
    character(100) :: buffer

    cfg = Configuration(('heptagon'))
    write(buffer,'(DT)') cfg

#ifdef __GFORTRAN__
#else
    @assert_that(trim(buffer),is(equal_to("'heptagon'")))
#endif    
  end subroutine test_dump_scalar_string

  @test
  subroutine test_dump_sequence()
    type(Configuration), target :: cfg

    character(100) :: buffer
    class(*), pointer :: node
    integer :: status
    character(:), allocatable :: expected

    cfg = Configuration(UnlimitedVector())
    call cfg%get_node_at_selector(node)

    select type (v => node)
    type is (UnlimitedVector)
       call v%push_back(1)
       call v%push_back(String('enigma')) ! Gfortran needs the string wrapper
       call v%push_back(.false.)
    end select
    
    write(buffer,'(DT)',iostat=status) cfg
    @assert_that(status, is(equal_to(0)))
    expected = "["//new_line('a')// &
         & "    1,"//new_line('a') // &
         & "    'enigma',"//new_line('a') // &
         & "    false"//new_line('a')// &
         & "]"

#ifdef __GFORTRAN__
    print*,trim(buffer)
    @assert_that(trim(buffer) == expected)
#else
    @assert_that(trim(buffer),is(equal_to(expected)))
#endif
    
  end subroutine test_dump_sequence

  @test
  subroutine test_dump_map()
    type(Configuration) :: cfg
    type(OrderedStringUnlimitedMap) :: m

    class(*), pointer :: node
    character(200) :: buffer
    integer :: status
    character(:), allocatable :: expected

    cfg = Configuration(OrderedStringUnlimitedMap())
    call cfg%get_node_at_selector(node)

    select type (m => node)
    type is (OrderedStringUnlimitedMap)
       call m%insert('triangle',3)
       call m%insert('square',4)
       call m%insert('heptadecagon',17)
    end select

    write(buffer,'(DT)', iostat=status) cfg
    @assert_that(status, is(equal_to(0)))
#ifdef __GFORTRAN__
    @assert_that(trim(buffer) == "{'triangle': 3,'square': 4,'heptadecagon': 17}", is(true()))
#else

    expected = "{" // new_line('a') // &
         & "    'triangle': 3," // new_line('a') // &
         & "    'square': 4," // new_line('a') // &
         & "    'heptadecagon': 17" // new_line('a') // &
         & "}"
    @assert_that(trim(buffer),is(equal_to(expected)))
#endif
    
  end subroutine test_dump_map

  @test
  subroutine test_dump_nested_sequence()
    type(Configuration) :: cfg
    class(*), pointer :: node, sub
    character(200) :: buffer
    character(:), allocatable :: expected

    integer :: status
    
    cfg = Configuration(UnlimitedVector())
    call cfg%get_node_at_selector(node)
    select type (v => node)
    type is (UnlimitedVector)
       call v%push_back(.true.)
       call v%push_back(1.234)

       call v%push_back(UnlimitedVector())
       sub => v%back()
       select type (vv => sub)
       type is (UnlimitedVector)
          call vv%push_back(-5)
          call vv%push_back(String('enough'))
       end select
          
       call v%push_back(UnlimitedVector())
       sub => v%back()
       select type (vv => sub)
       type is (UnlimitedVector)
          call vv%push_back(.false.)
       end select
    end select

    write(buffer,'(g0)') 1.234
    expected = "[" // new_line('a') // &
         & "    true," // new_line('a') // &
         & "    "//trim(buffer)// "," // new_line('a') // &
         & "    [" // new_line('a') // &
         & "        -5," // new_line('a') // &
         & "        'enough'" // new_line('a') // &
         & "    ]," // new_line('a') // &
         & "    [" // new_line('a') // &
         & "        false" // new_line('a') // &
         & "    ]" // new_line('a') // &
         & "]"

    write(buffer,'(DT)', iostat=status) cfg
    @assert_that(status, is(equal_to(0)))
#ifdef __GFORTRAN__
    @assert_that(trim(buffer) == expected,is(true()))
#else
    @assert_that(trim(buffer),is(equal_to(expected)))
#endif
    
  end subroutine test_dump_nested_sequence

end module Test_Configuration_dump
