! This test suite was created to try to flush potential
! compiler bugs in multiple compilers when switching to
! Configurations based upon AbstractNode.

! Possibly there are still bugs in yafyaml or gFTL containers, but
! currently it appears that this just stresses compilers.  Sigh.

module Test_ComplexNode
   use funit
   use fy_Nodes
   use fy_ErrorCodes
   use, intrinsic :: iso_fortran_env, only: INT32, INT64
   use, intrinsic :: iso_fortran_env, only: REAL32, REAL64
   implicit none

contains

  @test
   subroutine test_deepcopy_1()
      class(AbstractNode), target, allocatable :: a, b
      type(Mapping), pointer :: m
      type(IntNode) :: inode
      type(StringNode) :: snode
      
      allocate(a, source=MappingNode())
      m => to_mapping(a)
      inode = IntNode(1)
      snode = StringNode('cat')
      call m%insert(snode, inode)

      b = a

      m => to_mapping(b)

      @assert_that(m%size(), is(1_INT64))

      deallocate(b)

      
   end subroutine test_deepcopy_1

   @test
   subroutine test_deepcopy_2()
      class(AbstractNode), target, allocatable :: a, b, c
      type(Mapping), pointer :: m
      type(IntNode) :: inode
      
      allocate(a, source=MappingNode())
      m => to_mapping(a)
      call m%insert(StringNode('cat'), IntNode(1))

      allocate(b, source=MappingNode())
!!$      b = MappingNode()
      m => to_mapping(b)
      inode = IntNode(2)
      call m%insert(IntNode(2), a)
      
      allocate(c, source=a)
      m => to_mapping(c)
      @assert_that(m%size(), is(1_INT64))
      
   end subroutine test_deepcopy_2

   @test
   subroutine test_deepcopy_3()
      class(AbstractNode), target, allocatable :: a, b
      type(Mapping), pointer :: m
      class(AbstractNode), allocatable :: key
      
      a = MappingNode()
      m => to_mapping(a)

      key = StringNode('mapping')
      call m%insert(key, MappingNode())

      @assert_that(m%size(), is(1_INT64))
      
   end subroutine test_deepcopy_3


   @test
   subroutine test_copy_pair()
      type(MappingPair) :: p1, p2

      class(AbstractNode), allocatable :: k, v
      k = StringNode('dog')
      v = IntNode(3)
      p2 = MappingPair(k,v)

      p1 = p2
   end subroutine test_copy_pair

end module Test_ComplexNode
