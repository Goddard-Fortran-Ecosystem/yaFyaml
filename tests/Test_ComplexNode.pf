! This test suite was created to try to flush potential
! compiler bugs in multiple compilers when switching to
! Configurations based upon AbstractNode.

! Possibly there are still bugs in yafyaml or gFTL containers, but
! currently it appears that this just stresses compilers.  Sigh.

module Test_ComplexNode
   use funit
   use fy_Nodes
   use fy_ErrorCodes
   use, intrinsic :: iso_fortran_env, only: INT32, INT64
   use, intrinsic :: iso_fortran_env, only: REAL32, REAL64
   implicit none

contains

  @test
   subroutine test_deepcopy_1()
      class(AbstractNode), target, allocatable :: a, b
      type(newMapping), pointer :: m
      type(IntNode) :: inode
      type(StringNode) :: snode
      
      allocate(a, source=newMappingNode())
      m => to_newmapping(a)
      inode = IntNode(1)
      snode = StringNode('cat')
      call m%insert(snode, inode)

      b = a

      m => to_newmapping(b)

      @assert_that(m%size(), is(1_INT64))

   end subroutine test_deepcopy_1

   @test
   subroutine test_deepcopy_2()
      class(AbstractNode), target, allocatable :: a, b, c
      type(newMapping), pointer :: ma, mb, mc
      type(newMappingNode) :: mn
      
      a = newMappingNode()
      ma => to_newmapping(a)
      call ma%insert(StringNode('cat'), IntNode(1))

      b = newMappingNode()
      mb => to_newmapping(b)
!!$      call ma%insert(StringNode('cat'), IntNode(1))
!!$      call ma%insert(IntNode(2), IntNode(1))
      call mb%insert(IntNode(2), a)

      
!!$      c = a
!!$      mc => to_newmapping(c)
!!$      @assert_that(mc%size(), is(1_INT64))

      call mb%clear()

   end subroutine test_deepcopy_2

   @test
   subroutine test_deepcopy_3()
      class(AbstractNode), target, allocatable :: a, b
      type(newMapping), pointer :: m
      class(AbstractNode), allocatable :: key
      
      a = newMappingNode()
      m => to_newmapping(a)

      key = StringNode('mapping')
      call m%insert(key, newMappingNode())

      @assert_that(m%size(), is(1_INT64))
      
   end subroutine test_deepcopy_3


!!$   @test
!!$   subroutine test_copy_pair()
!!$      type(newMappingPair) :: p1, p2
!!$
!!$      class(AbstractNode), allocatable :: k, v
!!$      k = StringNode('dog')
!!$      v = IntNode(3)
!!$      p2 = newMappingPair(k,v)
!!$
!!$      p1 = p2
!!$   end subroutine test_copy_pair

end module Test_ComplexNode
