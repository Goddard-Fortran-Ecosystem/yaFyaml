module Test_UnlimitedUtilities
  use funit
  use fy_UnlimitedUtilities
  use fy_ArrayWrapper
  use gFTL_UnlimitedVector
  implicit none

contains

  @test
  subroutine test_is_logical
    class(*), allocatable :: u
    type(ArrayWrapper) :: w

    logical :: stat
    
    allocate(u, source=.true.)
    @assert_that(is_logical(u), is(true()))
    deallocate(u)

    allocate(u, source=1)
    @assert_that(is_logical(u), is(false()))
    deallocate(u)

    allocate(u, source=ArrayWrapper([.true.,.false.]))
    stat = is_logical(u)
    @assert_that(stat, is(true()))
    deallocate(u)

  end subroutine test_is_logical

  @test
  subroutine test_is_logical_unlimited_vector
    class(*), pointer :: u
    type(UnlimitedVector), target :: v
    logical :: stat

    call v%push_back(.true.)
    u => v
    @assert_that(is_logical(u), is(true()))

    call v%push_back(.true.)
    @assert_that(is_logical(u), is(true()))

    call v%push_back(.true.)
    @assert_that(is_logical(u), is(true()))

    call v%push_back(3)
    @assert_that(is_logical(u), is(false()))
    
  end subroutine test_is_logical_unlimited_vector
  

  @test
  subroutine test_is_integer
    class(*), allocatable :: u

    u = 5
    @assert_that(is_integer(u), is(true()))

    u = 1.2
    @assert_that(is_integer(u), is(false()))
    
  end subroutine test_is_integer

  @test
  subroutine test_is_real
    class(*), allocatable :: u

    u = 5.2
    @assert_that(is_real(u), is(true()))

    u = 1
    @assert_that(is_real(u), is(false()))
    
  end subroutine test_is_real


  @test
  subroutine test_is_string
    class(*), allocatable :: u

    u = 'a b c'
    @assert_that(is_string(u), is(true()))

    u = 'cat'
    @assert_that(is_string(u), is(true()))

    u = 5
    @assert_that(is_string(u), is(false()))
    
  end subroutine test_is_string

end module Test_UnlimitedUtilities

  
