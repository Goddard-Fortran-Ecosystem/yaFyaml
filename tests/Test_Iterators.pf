module Test_Iterators
   use funit
   use yafyaml
   implicit none
   
contains

   ! The default iterator only knows that the values
   ! of a sequence are subtypes of AbstractNode.
   @test
   subroutine test_simple_sequence_iterator()
      type(SequenceNode), target :: node
      class(NodeIterator), allocatable :: iter
      integer :: counter
      type(sequence), pointer :: s

      s => to_sequence(node)
      call s%push_back(IntNode(3))
      call s%push_back(BoolNode(.true.))

      associate (b => node%begin(), e => node%end())
        iter = b
        counter = 0
        do while (iter /= e)
           counter = counter + 1
           call iter%next()
        end do
      end associate

      @assert_that(counter, is(2))
   end subroutine test_simple_sequence_iterator

   @test
   subroutine test_simple_mapping_iterator()
      type(MappingNode), target :: node
      class(NodeIterator), allocatable :: iter
      integer :: counter
      type(Mapping), pointer :: m

      m => to_mapping(node)
      call node%set(.true., 'cat')
      call node%set(.false., 'dog')
      call node%set(.true., 'spider')

      associate (b => node%begin(), e => node%end())
        iter = b
        counter = 0
        do while (iter /= e)
           counter = counter + 1
           call iter%next()
        end do
      end associate

      @assert_that(counter, is(3))
   end subroutine test_simple_mapping_iterator


   @test
   subroutine test_sequence_iter_as_bool()
      type(SequenceNode), target :: node
      class(NodeIterator), allocatable :: iter
      type(sequence), pointer :: s
      logical, pointer :: flag

      s => to_sequence(node)
      call s%push_back(BoolNode(.false.))
      call s%push_back(BoolNode(.true.))
      
      associate (b => node%begin(), e => node%end())
        iter = b
        flag => to_bool(iter%at())
        @assert_that(flag, is(false()))

        call iter%next()
        flag => to_bool(iter%at())
        @assert_that(flag, is(true()))

      end associate

   end subroutine test_sequence_iter_as_bool

   ! Note that this test hinges on the fact that MappingNode uses an
   ! _ordered_ map.  Otherwise the sequence is not determined easily.
   @test
   subroutine test_mapping_iter_as_bool()
      type(MappingNode), target :: mnode
      class(YAML_Node), allocatable :: node
      class(NodeIterator), allocatable :: iter
      logical, pointer :: flag
      character(:), pointer :: s

      allocate(MappingNode :: node)
      call node%set(.true., .true.)
      call node%set(.false.,.false.)
      call node%set(.true., 'a')

      associate (b => node%begin(), e => node%end())
        iter = b ! node%of('.true.')
        flag => to_bool(iter%first())
        @assert_that(flag, is(true()))
        flag => to_bool(iter%second())
        @assert_that(flag, is(true()))

        call iter%next() ! node%of('.false.')
        flag => to_bool(iter%first())
        @assert_that(flag, is(false()))
        flag => to_bool(iter%second())
        @assert_that(flag, is(false()))


        call iter%next() ! node%of('a')
        s => to_string(iter%first())
        @assertEqual('a', s)
        flag => to_bool(iter%second())
        @assert_that(flag, is(true()))
      end associate

   end subroutine test_mapping_iter_as_bool


end module Test_Iterators
