name: CI Tests

on: [pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15, macos-11]
        #compiler: [gfortran-8, gfortran-9, gfortran-10, gfortran-11]
        compiler: [gfortran-8, gfortran-9, gfortran-10]
        exclude:
          - os: macos-10.15
            compiler: gfortran-8
          - os: macos-11
            compiler: gfortran-8

      # fail-fast is set to 'true' here which is good for production, but when
      # debugging, set to 'false'. fail-fast means if *any* ci test in the matrix fails
      # GitHub Actions will stop any other test immediately. So good for production, bad
      # when trying to figure something out. For more info see:
      # https://www.edwardthomson.com/blog/github_actions_6_fail_fast_matrix_workflows.html

      fail-fast: true
    env:
      FC: ${{ matrix.compiler }}
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_btl_vader_single_copy_mechanism: none

    name: ${{ matrix.os }} / ${{ matrix.compiler }}
    steps:
      - name: Install GCC 8 on Ubuntu 20
        if: matrix.os == 'ubuntu-20.04' && matrix.compiler == 'gfortran-8'
        run: |
          sudo apt-get install gfortran-8 -y
      - name: Install GCC 11 on Ubuntu 20
        if: matrix.os == 'ubuntu-20.04' && matrix.compiler == 'gfortran-11'
        run: |
          sudo apt-get install gfortran-11 -y
      - name: Compiler Versions
        run: |
          ${FC} --version
          cmake --version
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Build GFE Prereqs
        run: |
          bash ./tools/ci-install-gfe.bash
      - name: Build yaFyaml
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_Fortran_COMPILER=${FC} -DCMAKE_INSTALL_PREFIX=${HOME}/Software/yaFyaml -DCMAKE_PREFIX_PATH=${HOME}/Software/GFE
          make -j$(nproc)
      - name: Build Tests
        run: |
          cd build
          make -j$(nproc) tests
      - name: Run Tests
        run: |
          cd build
          ctest -j1 --output-on-failure --repeat until-pass:4
      - name: Archive log files on failure
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: logfiles
          path: |
            build/**/*.log

